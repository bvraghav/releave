
* Test drive

#+BEGIN_SRC python :results output
  import sys
  import logging as lg
  lg.basicConfig(level=lg.DEBUG, format='%(levelname)-8s: %(message)s', 
                 stream=sys.stdout)

  import cv2
  import numpy as np

  def open_image(image_name) :
    img = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
    if img is None :
      lg.warn('Problem opening: %s', image_name)
      raise Exception('Problem opening: %s' % image_name)

    lg.info('Success opening : %s, %s', image_name, img.shape)

    img = img.astype(np.float32) / 255
    lg.info('@`%s\' (min, max, mu, sigma): %0.2g, %0.2g, %0.2g, %0.2g',
            image_name, np.min(img), np.max(img),
            np.average(img), np.std(img))

    return img

  obj_1 = open_image('obj_1.png')
  mask_1 = open_image('mask_1.png')
  obj_2 = open_image('obj_2.png')
  mask_2 = open_image('mask_2.png')

  K = cv2.getGaussianKernel(11, 0)
  K = K * K.T
  lg.debug('Gaussian Kernel: size: %s, sum: %0.2g', K.shape, np.sum(K))

  kernel_1 = K * mask_1
  kernel_1 /= np.sum(kernel_1)
  lg.debug('Sum of Gaussian Kernel 1: %0.2g', np.sum(kernel_1))

  luminosity_1 = kernel_1 * obj_1
  lg.info ('Luminosity Score of obj_1 at center: %0.2g', np.sum(luminosity_1))

  kernel_2 = K * mask_2
  kernel_2 /= np.sum(kernel_2)
  lg.debug('Sum of Gaussian Kernel 2: %0.2g', np.sum(kernel_2))

  luminosity_2 = kernel_2 * obj_2
  lg.info ('Luminosity Score of obj_2 at center: %0.2g', np.sum(luminosity_2))

  lg.debug('\n%s\n%s\n%s\n%s',
           kernel_1, luminosity_1,
           kernel_2, luminosity_2)

#+END_SRC

#+RESULTS:
#+begin_example
  INFO    : Success opening : obj_1.png, (11, 11)
  INFO    : @`obj_1.png' (min, max, mu, sigma): 0.12, 1, 0.64, 0.32
  INFO    : Success opening : mask_1.png, (11, 11)
  INFO    : @`mask_1.png' (min, max, mu, sigma): 0, 1, 0.3, 0.46
  INFO    : Success opening : obj_2.png, (11, 11)
  INFO    : @`obj_2.png' (min, max, mu, sigma): 0, 0.88, 0.27, 0.28
  INFO    : Success opening : mask_2.png, (11, 11)
  INFO    : @`mask_2.png' (min, max, mu, sigma): 0, 1, 0.48, 0.48
  DEBUG   : Gaussian Kernel: size: (11, 11), sum: 1
  DEBUG   : Sum of Gaussian Kernel 1: 1
  INFO    : Luminosity Score of obj_1 at center: 0.39
  DEBUG   : Sum of Gaussian Kernel 2: 1
  INFO    : Luminosity Score of obj_2 at center: 0.42
  DEBUG   : 
  [[0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.01063623 0.0198711  0.02891228 0.0327619
    0.02891228 0.0198711  0.         0.         0.        ]
   [0.         0.         0.01547563 0.02891228 0.04206711 0.04766828
    0.04206711 0.02891228 0.         0.         0.        ]
   [0.         0.         0.01753618 0.0327619  0.04766828 0.05401524
    0.04766828 0.0327619  0.         0.         0.        ]
   [0.         0.         0.01547563 0.02891228 0.04206711 0.04766828
    0.04206711 0.02891228 0.         0.         0.        ]
   [0.         0.         0.01063623 0.0198711  0.02891228 0.0327619
    0.02891228 0.0198711  0.         0.         0.        ]
   [0.         0.         0.00569316 0.01063623 0.01547563 0.01753618
    0.01547563 0.01063623 0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]]
  [[0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.00333686 0.01870221 0.02233615 0.00912194
    0.00351483 0.00413007 0.         0.         0.        ]
   [0.         0.         0.00734334 0.0263045  0.01864151 0.00785125
    0.00560895 0.00442188 0.         0.         0.        ]
   [0.         0.         0.00790847 0.01670215 0.00654271 0.03516287
    0.01065526 0.0041113  0.         0.         0.        ]
   [0.         0.         0.00327719 0.00385497 0.00808348 0.01551556
    0.02573518 0.00975081 0.         0.         0.        ]
   [0.         0.         0.00992715 0.01753332 0.0140593  0.00449673
    0.02097557 0.00600029 0.         0.         0.        ]
   [0.         0.         0.00562619 0.00800846 0.00260962 0.00364478
    0.01377634 0.0038791  0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]]
  [[0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.         0.         0.         0.         0.        ]
   [0.         0.         0.         0.         0.         0.
    0.00750516 0.01416165 0.01079298 0.00518975 0.00168487]
   [0.         0.         0.         0.         0.         0.03397202
    0.05062882 0.03479664 0.0186253  0.00776418 0.00252066]
   [0.         0.         0.         0.         0.04117139 0.06500869
    0.05736997 0.03942976 0.02110523 0.00879797 0.00285628]
   [0.         0.         0.         0.02060507 0.05062882 0.05736997
    0.05062882 0.03479664 0.0186253  0.00776418 0.00252066]
   [0.         0.         0.00276099 0.02391536 0.03479664 0.03942976
    0.03479664 0.02391536 0.01280097 0.00533624 0.00173242]
   [0.         0.         0.00405738 0.01280097 0.0186253  0.02110523
    0.0186253  0.01280097 0.00685187 0.00285628 0.0009273 ]
   [0.         0.         0.00240824 0.00533624 0.00776418 0.00879797
    0.00776418 0.00533624 0.00285628 0.00119068 0.00038656]
   [0.         0.         0.00090184 0.00173242 0.00252066 0.00285628
    0.00252066 0.00173242 0.0009273  0.00038656 0.0001255 ]]
  [[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 3.29638347e-03 6.10894523e-03
    4.48649162e-03 2.64575664e-04 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    0.00000000e+00 2.21151208e-02 4.56652106e-03 9.55202019e-04
    5.11282797e-04 0.00000000e+00 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
    3.63276973e-02 5.22618894e-02 2.51977902e-02 2.93790411e-03
    8.27656181e-04 4.14022106e-04 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 0.00000000e+00 9.05007127e-03
    2.95831153e-02 4.58959753e-02 2.38253268e-02 2.66091994e-02
    1.21247066e-02 5.08477746e-03 1.18619319e-04]
   [0.00000000e+00 0.00000000e+00 2.12217551e-03 2.71978615e-03
    1.91040412e-02 3.13891852e-02 3.00206354e-03 1.50057175e-03
    2.96179312e-03 3.43193376e-03 8.83196015e-05]
   [0.00000000e+00 0.00000000e+00 3.13452454e-03 1.10439746e-03
    1.00795756e-02 1.66358889e-02 1.16864645e-03 0.00000000e+00
    8.06101851e-05 1.56815513e-04 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 1.55827185e-03 3.34822815e-04
    3.28835901e-03 3.86420628e-03 1.82686613e-04 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00]
   [0.00000000e+00 0.00000000e+00 1.69758855e-04 2.03814466e-05
    6.91946022e-05 7.84077564e-05 0.00000000e+00 0.00000000e+00
    0.00000000e+00 0.00000000e+00 0.00000000e+00]]
#+end_example

* Module 

#+BEGIN_SRC python
  def reduce_lum(obj, mask, kernel) :
    kernel_1 = kernel * mask
    kernel_1 /= np.sum(kernel_1)
    lg.debug('Sum of Gaussian Kernel: %0.2g', np.sum(kernel_1))

    luminosity_mat = kernel_1 * obj
    luminosity = np.sum(luminosity_mat)
    lg.debug ('Luminosity Score of obj at center: %0.2g', luminosity)

    return luminosity


  def diff_lum(obj_1, mask_1, obj_2, mask_2, kernel) :

    lum_1 = reduce_lum(obj_1, mask_1, kernel)
    lum_2 = reduce_lum(obj_2, mask_2, kernel)

    return abs(lum_1 - lum_2)

#+END_SRC

* Select points at random from a given mask

#+BEGIN_SRC python :results output
  import sys
  import logging as lg
  lg.basicConfig(level=lg.DEBUG, format='%(levelname)-8s: %(message)s', 
                 stream=sys.stdout)

  import numpy as np

  from image_functions import open_image

  mask_1 = open_image('mask_1.png')
  if mask_1 is not None :
    lg.info('Opened mask_1')

  points_1 = np.nonzero(mask_1)
  points_1 = np.array(points_1, dtype=np.int32)
  lg.info('points_1.shape: %s', points_1.shape)
#+END_SRC

#+RESULTS:
: INFO    : Success opening : mask_1.png, (11, 11)
: INFO    : @`mask_1.png' (min, max, mu, sigma): 0, 1, 0.3, 0.46
: INFO    : Opened mask_1
: INFO    : points_1.shape: (2, 36)
